plugins {
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

architectury {
    minecraft = rootProject.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        maven { url "https://maven.neoforged.net/releases/" }
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
        maven {
            name = 'tterrag maven'
            url = 'https://maven.tterrag.com/'
        }
        maven {
            name = "Jared's maven"
            url = "https://maven.blamejared.com/"
        }
        maven {
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
        maven { url = "https://cursemaven.com" }
        maven { // saps.dev Maven (KubeJS and Rhino)
            url = "https://maven.saps.dev/releases"
            content {
                includeGroup "dev.latvian.mods"
            }
        }
        maven {
            name = "Mortuusars Github Maven"
            url = "https://raw.githubusercontent.com/mortuusars/resources/main/maven/"
        }
    }

    loom {
        silentMojangMappingsLicense()
        runs {
            client {
                vmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:HotswapAgent=fatjar'
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"

        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${parchment_version}@zip")
        }
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    processResources {
        var expandProps = [
                minecraft_version                     : minecraft_version,
                minecraft_version_range               : minecraft_version_range,
                neoforge_version                      : neoforge_version,
                neoforge_version_range                : neoforge_version_range,
                neoforge_loader_version_range         : neoforge_loader_version_range,
                mod_id                                : mod_id,
                mod_name                              : mod_name,
                mod_version                           : mod_version,
                mod_authors                           : mod_authors,
                mod_description                       : mod_description,
                mod_issues                            : mod_issues,
                mod_page                              : mod_page,
                mod_github                            : mod_github,
                mod_license                           : mod_license,
                maven_group                           : maven_group,
                required_exposure_version_range_forge : required_exposure_version_range_forge,
                required_exposure_version_range_fabric: required_exposure_version_range_fabric
        ]
        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/neoforge.mods.toml', "*.mixins.json"]) {
            expand expandProps
        }
        inputs.properties(expandProps)
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId = base.archivesName.get()
                version = "${minecraft_version}-${mod_version}"
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            var path = System.getenv("LOCAL_MAVEN")
            if (path != null) {
                maven {
                    name = 'local'
                    url = uri(path + "/maven")
                }
            }
        }
    }
}

/**
 * Gets the first part (topmost) of a changelog file.
 * Expects it to be in the following format:
 * [
 *  ## latest version
 *      changes
 *
 *  ## older version
 *      changes
 * ]
 * Will return an empty string if failed.
 */
def getLatestVersionChangelog() {
    def changelogFileName = 'CHANGELOG.md'
    def changelogFile = file(changelogFileName)
    if (changelogFile.exists()) {
        def changelogContent = changelogFile.text
        def changelogParts = changelogContent.split(/(?m)^##\s/)

        if (changelogParts.size() > 1) {
            return "## " + changelogParts[1].trim() // First part will always be second in the list
        } else {
            println("[WARN] Changelog does not contain any versions.")
            return ""
        }
    } else {
        println("[WARN] Changelog file <${changelogFileName}> does not exist.")
        return ""
    }
}

project.ext.changelog = getLatestVersionChangelog()

task printLatestVersionChangelog {
    doLast {
        println project.changelog
    }
}

publishMods {
    changelog = project.ext.changelog
    type = STABLE
    dryRun = providers.environmentVariable("CURSEFORGE_TOKEN").getOrNull() == null || providers.environmentVariable("MODRINTH_TOKEN").getOrNull() == null

    def cfOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        projectId = mod_curseforge_project_id
        minecraftVersions.add("${minecraft_version}")
        javaVersions.add(JavaVersion.VERSION_21)
        clientRequired = true
        serverRequired = true
    }

    def mrOptions = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = mod_modrinth_project_id
        minecraftVersions.add("${minecraft_version}")
    }

    curseforge("curseforgeNeoForge") {
        from cfOptions
        file project(":neoforge")
        modLoaders.add("neoforge")
        displayName = "${mod_name} - NeoForge ${minecraft_version} - ${mod_version}"
        requires("exposure")
    }

    curseforge("curseforgeFabric") {
        from cfOptions
        file project(":fabric")
        modLoaders.add("fabric")
        displayName = "${mod_name} - Fabric ${minecraft_version} - ${mod_version}"
        requires("fabric-api")
        requires("exposure")
    }

    modrinth("modrinthNeoForge") {
        from mrOptions
        file project(":neoforge")
        modLoaders.add("neoforge")
        displayName = "${mod_name} - ${mod_version}"
        requires("exposure")
    }

    modrinth("modrinthFabric") {
        from mrOptions
        file project(":fabric")
        modLoaders.add("fabric")
        displayName = "${mod_name} - ${mod_version}"
        requires("fabric-api")
        requires("exposure")
    }
}